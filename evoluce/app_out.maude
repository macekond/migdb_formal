--- TODO create NzNat + 0 sort for cardinalities
load ./sequence.maude

fmod APPLICATION-SORTS is
	--- Structural sorts
	sorts Class Association Property App-Type .	
	--- Instance sorts
	sorts PropertyValue AssociationValue Instance .
	--- Application and Error Aplication
	sorts Application ErrApplication .
	subsort ErrApplication < Application .
endfm

view Association from TRIV to APPLICATION-SORTS is
	sort Elt to Association .
endv 

view Property from TRIV to APPLICATION-SORTS is
	sort Elt to Property .
endv

view Class from TRIV to APPLICATION-SORTS is
	sort Elt to Class .
endv

fmod APPLICATION-STRUCTURE  is
	pr QID .
	pr BOOL .
	pr APPLICATION-SORTS .
	pr SEQUENCE{Property} .
	pr SEQUENCE{Association} .
	pr SEQUENCE{Qid} .
	pr SEQUENCE{String} .
	
	op APP-STRING : -> App-Type [ctor] .
	
	var Q N : Qid . 
	var Props : List{Property} .
	var Assocs : List{Association} .
	var S : String .
	var T : App-Type .
	var B1 B2 B3 : Bool .
	var C1 C2 : Nat .
	
	
--- Class = < label, property*, primitiveCollection*, association* >
	op class : Qid List{Property} List{Association} -> Class [ctor] .
	
	op name : Class -> Qid .
	eq name(class(Q, Props, Assocs)) = Q .
	
	op singlePropertyList : Class -> List{Property} .
	eq singlePropertyList(class(Q, Props, Assocs)) = singleProperty(Props) .
	
	op collectionPropertyList : Class -> List{Property} .
	eq collectionPropertyList(class(Q, Props, Assocs)) = collection(Props) .
	
	op associations : Class -> List{Association} .
	eq associations(class(Q, Props, Assocs)) = Assocs .
	
--- CLASS HELPERS
	op singleProperty : List{Property} -> List{Property} .
	eq singleProperty([]) = [] .
	ceq singleProperty(Props) = head(Props) singleProperty(tail(Props)) if cardinality(head(Props)) < 2 .
	eq singleProperty(Props) = [] singleProperty(tail(Props)) [owise] .

	op collection : List{Property} -> List{Property} .
	eq collection([]) = [] .
	ceq collection(Props) = head(Props) collection(tail(Props)) if cardinality(head(Props)) > 1 .
	eq collection(Props) = [] collection(tail(Props)) [owise] .
--- END
	
--- Property = < label, type, defaultValue, cardinality >
	--- cardinality = 0 => not mandatory
	--- cardinality = 1 => mandatory (not null)
	--- cardinality > 1 => collection
	op property : Qid App-Type String Nat -> Property [ctor] .
	
	op name : Property -> Qid . 
	eq name(property(Q, T, S, C1)) = Q .
	
	op type : Property -> App-Type .
	eq type(property(Q, T, S, C1)) = T .
	
	op defaultValue : Property -> String .
	eq defaultValue(property(Q, T, S, C1)) = S .
		
	op cardinality : Property -> Nat .
	eq cardinality(property(Q, T, S, C1)) = C1 .
	
--- Association = < label, referencedClass, startCardinality, endCardinality >
	op association : Qid Qid Nat Nat -> Association [ctor] .
	op name : Association -> Qid .
	eq name(association(Q, N, C1, C2)) = Q .
	op referenceA : Association -> Qid .
	eq referenceA(association(Q, N, C1, C2)) = N .
	op startCardinality : Association -> NzNat .
	eq startCardinality(association(Q, N, C1, C2)) = C1 .
	op endCardinality : Association -> NzNat .
	eq endCardinality(association(Q, N, C1, C2)) = C2 .
	
--- SORTS ENABLING STORING DATA INSTANACEINSTANCES 	
--- propVal = < propertyName, values >	
	op propVal : Qid List{String} -> PropertyValue [ctor] .
	op reference : PropertyValue -> Qid .
	op val : PropertyValue -> List{String} .
	
--- asocVal = < accociationName, referencedInstancies >
	op assocVal : Qid List{Qid} -> AssociationValue [ctor] .
	op reference : AssociationValue -> Qid .
	op val : AssociationValue -> List{Qid} .
	
endfm

view PropertyValue from TRIV to APPLICATION-STRUCTURE   is
	sort Elt to PropertyValue .
endv

view AssociationValue from TRIV to APPLICATION-STRUCTURE   is
	sort Elt to AssociationValue .
endv

fmod INSTANACE is
	pr APPLICATION-STRUCTURE  .
	pr SEQUENCE{Class} .
	pr SEQUENCE{PropertyValue} .
	pr SEQUENCE{AssociationValue} . 
	
--- instance = < name, property*, association* >	
	op instance : Qid Qid List{PropertyValue} List{AssociationValue} -> Instance [ctor] .

	var As : List{Association} .
	var A : Association .
	var Cls : List{Class} .
	var C : Class .
	var Q N : Qid .
	var PVs : List{PropertyValue} .
	var AVs : List{AssociationValue} .
	

	op name : Instance -> Qid .
	eq name(instance(Q, N, PVs, AVs)) = Q .
	
	op ofClass : Instance -> Qid .
	eq ofClass(instance(Q, N, PVs, AVs)) = N .
	
	op props : Instance -> List{PropertyValue} .
	eq props(instance(Q, N, PVs, AVs)) = PVs .
	
	op assocs : Instance -> List{AssociationValue} .
	eq assocs(instance(Q, N, PVs, AVs)) = AVs .

--- HELPERS	
	op referencesExist : List{Association} List{Class} -> Bool .
	eq referencesExist([], Cls) = true .
	eq referencesExist(As, []) = false .
	eq referencesExist(A, C) = referenceA(A) == name(C) .
	eq referencesExist(As, Cls) = containsName(Cls, referenceA(head(As))) or referencesExist(tail(As), Cls) .

	op isAssociated : List{Class} Qid -> Bool .
	eq isAssociated([], Q) = false .
	eq isAssociated(Cls, Q) = associate(associations(Cls), Q) or isAssociated(tail(Cls), Q) . 
	
	op associate : List{Association} Qid -> Bool .
	eq associate([], Q) = false .
	eq associate(As, Q) = referenceA(head(As)) == Q or associate(tail(As), Q) . 
	
endfm

view Instance from TRIV to INSTANACE is
	sort Elt to Instance .
endv

fmod APPLICATION is
	pr INSTANACE .
	pr SEQUENCE{Instance} .

--- application = < class*, instance* >	
	op application : List{Class} List{Instance} -> Application [ctor] .
	op errApplication : String Application -> ErrApplication [ctor] .

	var A : Application .
	var Classes : List{Class} .
	var Instances : List{Instance} .
	var C : Class .
	var Q : Qid . 
	
	op classes : Application -> List{Class} .
	eq classes(application(Classes, Instances)) = Classes .
	
	op instances : Application -> List{Instance} .
	eq instances(application(Classes, Instances)) = Instances .
	
--- addClass
	op addClass : Class Application -> Application .
	ceq addClass(C, A) = errApplication("add class - the name already exists", A) if containsName(classes(A), name(C)) .
	ceq addClass(C, A) = errApplication("add class - associed classes not exist(s)", A) if not referencesExist(associations(C), classes(A)) .
	eq addClass(C, A) = application(classes(A) C, instances(A)) .
	
--- removeClass
	op removeClass : Application Qid -> Application .
	ceq removeClass(A, Q) = errApplication("remove class - table not exists", A) if not containsName(classes(A), Q) . 
	ceq removeClass(A, Q) = errApplication("remove class - instances exists", A)  if instancesExist(instances(A), Q) .
--- should it be isReferencedByInstances?
	ceq removeClass(A, Q) = errApplication("remove class - class is referenced by an association", A)  if isAssociated(classes(A), Q) .
	eq removeClass(A, Q) = application(removeByName(classes(A), Q), instances(A)) .
	
	
--- addProperty

--- removeProperty	


--- HELPERS
	op instancesExist : List{Instance} Qid -> Bool .
	eq instancesExist([], Q) = false .
	eq instancesExist(Instances, Q) = (ofClass(head(Instances)) == Q) or instancesExist(tail(Instances), Q) .
	
	
endfm