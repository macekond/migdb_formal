load ./sequence.maude

fmod DATABASE-SORTS is
	--- Structural sorts	
	sorts  Table PrimaryKey ForeignKey Column Constraint Schema Db-Type .
	--- Data sorts
	sort Data ColumnVal PKVal FKVal .
	--- Database and Error Database
	sort Database ErrDatabase .
	subsorts ErrDatabase < Database .
endfm

view Table from TRIV to DATABASE-SORTS is
	sort Elt to Table .
endv

view Column from TRIV to DATABASE-SORTS is
	sort Elt to Column .
endv

view Constraint from TRIV to DATABASE-SORTS is
	sort Elt to Constraint .
endv

view ForeignKey from TRIV to DATABASE-SORTS is
	sort Elt to ForeignKey .
endv

fmod DATABASE-STRUCTURE is
	pr DATABASE-SORTS .
	pr QID .
	pr SEQUENCE{Table} .
	pr SEQUENCE{Column} .
	pr SEQUENCE{ForeignKey} .
	pr SEQUENCE{Constraint} .
	pr NAT .

--- Constraint = < NOTNULL | UNIQUE >	
	op NOTNULL : -> Constraint [ctor] .
	op UNIQUE : -> Constraint [ctor] .

--- Db-Type = < DB-STRING >				
	op DB-STRING : -> Db-Type [ctor] .
	
--- Table = < name, PK, column*, foreignKey* >	
	op table : Qid PrimaryKey List{Column} List{ForeignKey} -> Table [ctor].
	op name : Table -> Qid .
	op pkName : Table -> Qid .
	op columns : Table -> List{Column} . 
	op foreignKeys : Table -> List{ForeignKey} . 
	
--- Column = < name, type, constraint* >	
	op column : Qid Db-Type List{Constraint} -> Column [ctor] .
	op name : Column -> Qid .
	op type : Column -> Db-Type .
	op constraints : Column -> List{Constraint} .

--- ForeignKey = < name, referencedTableName, constraint* >	
--- At the moment it is possible to reference an ID column only
	op foreignKey : Qid Qid List{Constraint} -> ForeignKey [ctor] . --- Constraints on FK?
	op name : ForeignKey -> Qid .
	op reference : ForeignKey -> Qid .
	
--- PrimaryKey = < name > 	
--- Sequence could be part of primary key
	op primaryKey : Qid -> PrimaryKey [ctor] . 
	op name : PrimaryKey -> Qid .

		
	var N M : Qid .
	var PK : PrimaryKey .
	var Cols : List{Column} .
	var FKs : List{ForeignKey} .
	var T : Db-Type .
	var Cons : List{Constraint} .
	var P : NzNat .
	var S : String .
	
	
	eq name(primaryKey(N)) = N .		
	
	eq name(table(N, PK, Cols, FKs)) = N .
	eq pkName(table(N, PK, Cols, FKs)) = name(PK) .
	eq columns(table(N, PK, Cols, FKs)) = Cols .
	eq foreignKeys(table(N, PK, Cols, FKs)) = FKs .
	
	eq name(column(N, T, Cons)) = N .
	eq type(column(N, T, Cons)) = T .
	eq constraints(column(N, T, Cons)) = Cons .
	
	eq name(foreignKey(N, M, Cons)) = N .
	eq reference(foreignKey(N, M, Cons)) = M .

		


	--- ColumnValue = < columnName, value >	
		op col(_ _) : Qid String -> ColumnVal [ctor] .
		op columnName : ColumnVal -> Qid .
		op value : ColumnVal -> String . 

	--- PrimaryKeyValue = < value > 	
		op pk(_) : NzNat -> PKVal [ctor] .
		op value : PKVal -> NzNat .

	--- ForeignKey = < foreignKeyName, value >	
		op fk(_ _) : Qid NzNat -> FKVal [ctor] . 
		op name : FKVal -> Qid .
		op value : FKVal -> NzNat . 

	
		eq columnName(col(N S)) = N .
		eq value(col(N S)) = S .	

		eq value(pk(P)) = P .

		eq name(fk(N P)) = N .
		eq value(fk(N P)) = P .
endfm

view ColumnVal from TRIV to DATABASE-STRUCTURE  is
	sort Elt to ColumnVal .
endv

view FKVal from TRIV to DATABASE-STRUCTURE  is
	sort Elt to FKVal .
endv

fmod DATA is
	pr DATABASE-STRUCTURE .
	pr SEQUENCE{FKVal} .
	pr SEQUENCE{ColumnVal} .
	
--- Row = < tableName, pkValue, columnValue*, foreignKeyValue* >	
	op row : Qid PKVal List{ColumnVal} List{FKVal} -> Data [ctor] .
	op inTable : Data -> Qid .
	op keyValue : Data -> NzNat .
	op columns : Data -> List{ColumnVal} .
	op fkeys : Data -> List{FKVal} .
	
	var N : Qid .
	var PK : PKVal .
	var ColVals : List{ColumnVal} .
	var FKVals : List{FKVal} .
	
	eq inTable(row(N, PK, ColVals, FKVals)) = N .
	eq keyValue(row(N, PK, ColVals, FKVals)) = value(PK) .
	eq columns(row(N, PK, ColVals, FKVals)) = ColVals .
	eq fkeys(row(N, PK, ColVals, FKVals)) = FKVals . 
	
endfm

view Row from TRIV to DATA is
	sort Elt to Data . 
endv

fmod DATABASE is
	pr DATA .
	pr SEQUENCE{Row} .
	
--- Database = < table*, row *>
--- possible implementations:	
--- 1. table has a list of rows
--- 2. there are only rows => table is a set of rows with the same structure => it is imposible to add structural information into database (simple CREATE table will not wokr, there has to be at least one row)
	op database : List{Table} List{Row} -> Database [ctor] .
	op errDatabase : String Database -> ErrDatabase [ctor] .
	
	var Tabs : List{Table} .
	var T : Table .
	var Rows : List{Row} .
	var D : Database .
	var N : Qid .
	var PK : PrimaryKey .
	var Cols : List{Column} .
	var FKs : List{ForeignKey} .
	var Fk : ForeignKey .

	op tables : Database -> List{Table} .
	eq tables(database(Tabs, Rows)) = Tabs .
	
	op data : Database -> List{Row} . 
	eq data(database(Tabs, Rows)) = Rows .

	op referencesExist : List{ForeignKey} List{Table} -> Bool .
	eq referencesExist([], Tabs) = false .
	eq referencesExist(FKs, []) = false .
	eq referencesExist(Fk, T) = reference(Fk) == name(T) .
	eq referencesExist(FKs, Tabs) = containsName(Tabs, reference(head(FKs))) or referencesExist(tail(FKs), Tabs) .
	
		
	op dataExist : Qid List{Row} -> Bool .
	eq dataExist(N, []) = false .
	eq dataExist(N, Rows) = (inTable(head(Rows)) == N) or dataExist(N, tail(Rows)) .
	
	op isReferenced : Qid List{Table} -> Bool .
	eq isReferenced(N, []) = false .
	eq isReferenced(N, Tabs) = references(N, foreignKeys(head(Tabs))) or isReferenced(N, tail(Tabs)) .

--- helpers

--- move to isReferenced ?
	op references : Qid List{ForeignKey} -> Bool .
	eq references(N, []) = false .
	eq references(N, FKs) = reference(head(FKs)) == N or references(N, tail(FKs)) . 
	
	
endfm

fmod DDL is
	pr DATABASE .
	
	var Tabs : List{Table} .
	var T : Table .
	var Rows : List{Row} .
	var D : Database .
	var N Q : Qid .
	var PK : PrimaryKey .
	var Cols : List{Column} .
	var C : Column .
	var FKs : List{ForeignKey} .
	var FK : ForeignKey .
	var ED : ErrDatabase .


	op addTable : List{Table} Database -> Database . 
	op addTable : Table Database -> Database .
	eq addTable(Tabs, ED) = ED .
	eq addTable([], D) = D .
	ceq addTable(T, D) = errDatabase("add table - name exists", D) if containsName(tables(D), name(T)) .
	ceq addTable(T, D) = errDatabase("add table - reference(s) not exist(s)", D) if foreignKeys(T) =/= [] and not referencesExist(foreignKeys(T), tables(D)) .
	eq addTable(T, D) = database(tables(D) T, data(D)) .
	eq addTable(Tabs, D) = addTable(tail(Tabs), addTable(head(Tabs), D))  .
	
--- addTable -> SQL : CREATE TABLE

---	ceq addTable(T, D) = errDatabase("add table - name exists", D) if containsName(tables(D), name(T)) .
---	ceq addTable(T, D) = errDatabase("add table - reference(s) not exist(s)", D) if foreignKeys(T) =/= [] and not referencesExist(foreignKeys(T), tables(D)) .
---	eq addTable(T, D) = database(tables(D) T, data(D)) [owise] .

--- removeTable -> SQL: DROP TABLE	
	op removeTable : Database Qid -> Database .
	ceq removeTable(D, N) = errDatabase("remove table - table not exists", D)  if not containsName(tables(D), N) .
	ceq removeTable(D, N) = errDatabase("remove table - data exists", D)  if dataExist(N, data(D)) .
	ceq removeTable(D, N) = errDatabase("remove table - table is referenced by a FK", D)  if isReferenced(N, tables(D)) .
	eq removeTable(D, N) = database(removeByName(tables(D), N), data(D)) .
	
--- addColumn -> SQL : ALTER TABLE table_name ADD column_name datatype
	op addColumn : Database Qid Column -> Database .
	ceq addColumn(D, N, C) = errDatabase("add column - table not exists", D) if not containsName(tables(D), N) .
	ceq addColumn(D, N, C) = errDatabase("add column - column name already exists", D) if containsName(columns(getByName(tables(D), N)), name(C)) .

--- removeColumn -> SQL : ALTER TABLE table_name DROP COLUMN column_name
	op removeColumn : Database Qid Qid -> Database .
	ceq removeColumn(D, N, Q) = errDatabase("remove column - table not exists", D) if not containsName(tables(D), N) .
	ceq removeColumn(D, N, Q) = errDatabase("remove column - column name not exists", D) if not containsName(columns(getByName(tables(D), N)), Q) .
	ceq removeColumn(D, N, Q) = errDatabase("remove colum - data exists", D)  if dataExist(N, data(D)) .
	eq removeColumn(D, N, Q) = database(removeByName(tables(D), N) remColumn(getByName(tables(D), N), Q) , data(D)) .
	
--- addFK 
	op addFK : ForeignKey Qid Database -> Database .
	ceq addFK(FK, Q, D) = errDatabase("add FK - target table not exists", D) if not containsName(tables(D), Q) .
	ceq addFK(FK, Q, D) = errDatabase("add FK - reference not exists", D) if not containsName(tables(D), reference(FK)) .
	ceq addFK(FK, Q, D) = errDatabase("add FK - name collision", D) if containsName(foreignKeys(getByName(tables(D), Q)), name(FK)) .
	eq addFK(FK, Q, D) = database(removeByName(tables(D), Q) addFKtoTable(getByName(tables(D), Q), FK), data(D)) .
		
	op addFKtoTable : Table ForeignKey -> Table .
	eq addFKtoTable(T, FK) = table(name(T), primaryKey(pkName(T)), columns(T), foreignKeys(T) FK ) .
	
--- HELPERS	
--- remColumn
	op remColumn : Table Qid -> Table .
	eq remColumn(T, Q) = table(name(T), primaryKey(pkName(T)), removeByName(columns(T), Q), foreignKeys(T)) .

endfm
