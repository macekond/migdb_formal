load ./app_out.maude
load ./data_out.maude

fmod ORM is
	pr DDL .
	pr APPLICATION .
	
	var C : Class .
	var T : Table .
	var D : Database .
	var EDb : ErrDatabase .
	var Props : List{Property} .
	var Assoc : List{Association} .
	var Prop : Property .
	var Q : Qid . 


	op type2type : App-Type -> Db-Type .
	eq type2type(APP-STRING) = DB-STRING .

---	op class2tables : Class -> List{Table} .
---	eq class2tables(C) = collections2tables(name(C), collectionPropertyList(C)) table(name(C), primaryKey('Id), props2cols(singleProperty(C)), props2cols(associations(C))) . 

	op class2table : Class -> Table .
	---TODO: associations
	--- PK is always generated
	eq class2table(C) = table(name(C), primaryKey('Id), props2cols(singlePropertyList(C)), []) .

	op props2cols : List{Property} -> List{Column} .
	op props2cols : Property -> Column .
	eq props2cols([]) = ([]).List{Column} .
	ceq props2cols(Prop) = [] if cardinality(Prop) > 2 .
	ceq props2cols(Prop) = column(name(Prop), type2type(type(Prop)), NOTNULL) if cardinality(Prop) == 1 .
	ceq props2cols(Prop) = column(name(Prop), type2type(type(Prop)), []) if cardinality(Prop) == 0 .
	eq props2cols(Props) = props2cols(head(Props)) props2cols(tail(Props)) .
	
	op collections2tables : Qid List{Property} -> List{Table} .
	eq collections2tables(Q, []) = ([]).List{Table} .
	eq collections2tables(Q, Props) = collection2table(Q, head(Props)) collections2tables(Q, tail(Props)) .
	
	op collection2table : Qid Property -> Table . 
	eq collection2table(Q, Prop) = table(name(Prop), primaryKey('Id), column('value, type2type(type(Prop)), [] ), foreignKey(Q, Q, NOTNULL)) .


	
--- Association = < label, referencedClass, ordered, unique, upperBound, lowerBound >
	op associations2db : Qid List{Association} Database -> Database .
	eq associations2db(Q, [], D) = D .
	eq associations2db(Q, Assoc, EDb) = EDb .
	eq associations2db(Q, Assoc, D) = associations2db(Q, tail(Assoc), association2db(Q, head(Assoc), D)) .
	
	op association2db : Qid Association Database -> Database .
	--- 1:N
	ceq association2db(Q, Assoc, D) = addFK(foreignKey(name(Assoc), Q, NOTNULL), referenceA(Assoc), D) if startCardinality(Assoc) < 2 .
	--- M:N
	eq association2db(Q, Assoc, D) = addTable(table(name(Assoc), primaryKey('Id'), [], foreignKey(Q, Q, NOTNULL) foreignKey(name(Assoc), name(Assoc), NOTNULL)), D) [owise] .


endfm


fmod ORMSYSTEM is
	pr ORM .
	
	sort OrmSystem .
	
	op system : Application Database -> OrmSystem [ctor] .
	
	var A : Application .
	var EA : ErrApplication .
	var D : Database .
	var ED : ErrDatabase .
	var C : Class .
	
	op addClass : Class OrmSystem -> OrmSystem .
	eq addClass(C, system(EA, D)) = system(EA, D) .
	eq addClass(C, system(A, ED)) = system(A, ED) .
	eq addClass(C, system(A, D)) = system(addClass(C, A), addClass2Db(C, D)) .
	
--- Limitation: if there is a collection with the same name as already existing table the evolution fails => rename a collection table
	op addClass2Db : Class Database -> Database .
	eq addClass2Db(C, ED) =  ED .
	eq addClass2Db(C, D) = associations2db(name(C), associations(C), addTables(collections2tables(name(C), collectionPropertyList(C)), addTable(class2table(C), D))) .	
endfm