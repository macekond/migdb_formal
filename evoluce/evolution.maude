load ./app_out.maude
load ./data_out.maude

fmod ORM is
	pr DDL .
	pr APP .
	
	var C : Class .
	var T : Table .
	var Props : List{Property} .
	var Prop : Property .
	var PrimColls : List{PrimitiveCollection} .
	var PrimColl : PrimitiveCollection .
	var Q : Qid . 


	op type2type : App-Type -> Db-Type .
	eq type2type(APP-STRING) = DB-STRING .

	
---	op prop2col : Class -> List{Table} .
---	eq prop2col(C) = collections2tables(name(C), collections(C)) table(name(C), primaryKey('Id), props2cols(properties(C)), prop2col(associations(C))) . 

	op props2cols : List{Property} -> List{Column} .
	eq props2cols([]) = ([]).List{Column} .
	eq props2cols(Props) = prop2col(head(Props)) props2cols(tail(Props)) .

	op collections2tables : Qid List{PrimitiveCollection} -> List{Table} .
	eq collections2tables(Q, []) = ([]).List{Table} .
	eq collections2tables(Q, PrimColls) = collection2table(Q, head(PrimColls)) collections2tables(Q, tail(PrimColls)) .
	
	op collection2table : Qid PrimitiveCollection -> Table . 
	eq collection2table(Q, PrimColl) = table(name(PrimColl), primaryKey('Id), column('value, type2type(type(PrimColl)), [] ), foreignKey(Q, Q, NOTNULL)) .

	op prop2col : Property -> Column .
	ceq prop2col(Prop) = column(name(Prop), type2type(type(Prop)), NOTNULL UNIQUE) if mandatory(Prop) and unique(Prop) .
	ceq prop2col(Prop) = column(name(Prop), type2type(type(Prop)), NOTNULL) if mandatory(Prop) .
	ceq prop2col(Prop) = column(name(Prop), type2type(type(Prop)), UNIQUE) if unique(Prop) .
	eq prop2col(Prop) = column(name(Prop), type2type(type(Prop)), []) [owise] .


---	op prop2col : List{Association} -> List{ForeignKey} .


endfm


fmod ORMSYSTEM is
	pr ORM .
	
	sort OrmSystem .
	
	op system : Application Database -> OrmSystem [ctor] .
	
	var A : Application .
	var D : Database .
	var C : Class .
	
---	op addClass : Class OrmSystem -> OrmSystem .
---	eq addClass(C, system(A, D)) = system(addClass(C, A), addTable(prop2col(C), D)) .
	
endfm