fmod SEQENCE{X :: TRIV} is
	
	sorts NeList{X} List{X} .
	subsort X$Elt < NeList{X} < List{X} .
	pr QID .
	
	op [] : -> List{X} [ctor] .
	op __ : List{X} List{X} -> List{X} [ctor assoc] .
	
	op name : X$Elt -> Qid .
	
	var E : X$Elt .
	var L : List{X} .
	var Q : Qid .
	
	eq [] L = L .
	eq L [] = L .

	op head : List{X} -> X$Elt .
	eq head([]) = [] .
	eq head(E L) = E .
	eq head(E) = E .
	
	op tail : List{X} -> List{X} .
	eq tail([]) = [] .
	eq tail(E L) = L .
	eq tail(E) = [] .
	
	op containsName : List{X} Qid -> Bool .	
	eq containsName([], Q) = false .
	eq containsName(L, Q) = name(head(L)) == Q or containsName(tail(L), Q) .
	
	op removeByName : List{X} Qid -> List{X} .
	eq removeByName([], Q) = [] .
	ceq removeByName(L, Q) = tail(L) if name(head(L)) == Q .
	eq removeByName(L, Q) = head(L) removeByName(tail(L), Q) [owise] .
	
endfm
	

fmod DIS is
		
	sorts  Table PrimaryKey ForeignKey Column Constraint Schema Type .
	
endfm

view Table from TRIV to DIS is
	sort Elt to Table .
endv

view Column from TRIV to DIS is
	sort Elt to Column .
endv

view Constraint from TRIV to DIS is
	sort Elt to Constraint .
endv

view ForeignKey from TRIV to DIS is
	sort Elt to ForeignKey .
endv

fmod DIR is
	pr DIS .
	pr QID .
	pr SEQENCE{Table} .
	pr SEQENCE{Column} .
	pr SEQENCE{ForeignKey} .
	pr SEQENCE{Constraint} .

--- Constraint = < NOTNULL | UNIQUE >	
	op NOTNULL : -> Constraint [ctor] .
	op UNIQUE : -> Constraint [ctor] .

--- Type = < STRING >				
	op STRING : -> Type [ctor] .
	
--- Table = < name, PK, column*, foreignKey* >	
	op table : Qid PrimaryKey List{Column} List{ForeignKey} -> Table [ctor].
	op name : Table -> Qid .
	op pkName : Table -> Qid .
	op columns : Table -> List{Column} . 
	op foreignKeys : Table -> List{ForeignKey} . 
	
--- Column = < name, type, constraint* >	
	op column : Qid Type List{Constraint} -> Column [ctor] .
	op name : Column -> Qid .
	op type : Column -> Type .
	op constraints : Column -> List{Constraint} .

--- ForeignKey = < name, referencedTableName >	
--- At the moment it is possible to reference an ID column
	op foreignKey : Qid Qid -> ForeignKey [ctor] . --- Constraints on FK?
	op name : ForeignKey -> Qid .
	op reference : ForeignKey -> Qid .
	
--- PrimaryKey = < name > 	
--- Sequence could be part of primary key
	op primaryKey : Qid -> PrimaryKey [ctor] . 
	op name : PrimaryKey -> Qid .

		
	var N M : Qid .
	var PK : PrimaryKey .
	var Cols : List{Column} .
	var FKs : List{ForeignKey} .
	var T : Type .
	var Cons : List{Constraint} .
	
	eq name(primaryKey(N)) = N .		
	
	eq name(table(N, PK, Cols, FKs)) = N .
	eq pkName(table(N, PK, Cols, FKs)) = name(PK) .
	eq columns(table(N, PK, Cols, FKs)) = Cols .
	eq foreignKeys(table(N, PK, Cols, FKs)) = FKs .
	
	eq name(column(N, T, Cons)) = N .
	eq type(column(N, T, Cons)) = T .
	eq constraints(column(N, T, Cons)) = Cons .
	
	eq name(foreignKey(N, M)) = N .
	eq reference(foreignKey(N, M)) = M .

endfm

fmod PREDATA is
	pr DIR .
	pr NAT .
		
	sort ColumnVal PKVal FKVal .

--- ColumnValue = < columnName, value >	
	op col(_ _) : Qid String -> ColumnVal [ctor] .
	op columnName : ColumnVal -> Qid .
	op value : ColumnVal -> String . 

--- PrimaryKeyValue = < value > 	
	op pk(_) : NzNat -> PKVal [ctor] .
	op value : PKVal -> NzNat .

--- ForeignKey = < foreignKeyName, value >	
	op fk(_ _) : Qid NzNat -> FKVal [ctor] . 
	op name : FKVal -> Qid .
	op value : FKVal -> NzNat . 
	
	var N : Qid .
	var S :	String . 
	var P : NzNat .
	
	eq columnName(col(N S)) = N .
	eq value(col(N S)) = S .	
	
	eq value(pk(P)) = P .
	
	eq name(fk(N P)) = N .
	eq value(fk(N P)) = P .
endfm

view ColumnVal from TRIV to PREDATA is
	sort Elt to ColumnVal .
endv

view FKVal from TRIV to PREDATA is
	sort Elt to FKVal .
endv

fmod DATA is
	pr PREDATA .
	pr SEQENCE{FKVal} .
	pr SEQENCE{ColumnVal} .
	
	sort Data .
	
--- Row = < tableName, pkValue, columnValue*, foreignKeyValue* >	
	op row : Qid PKVal List{ColumnVal} List{FKVal} -> Data [ctor] .
	op inTable : Data -> Qid .
	op keyValue : Data -> NzNat .
	op columns : Data -> List{ColumnVal} .
	op fkeys : Data -> List{FKVal} .
	
	var N : Qid .
	var PK : PKVal .
	var ColVals : List{ColumnVal} .
	var FKVals : List{FKVal} .
	
	eq inTable(row(N, PK, ColVals, FKVals)) = N .
	eq keyValue(row(N, PK, ColVals, FKVals)) = value(PK) .
	eq columns(row(N, PK, ColVals, FKVals)) = ColVals .
	eq fkeys(row(N, PK, ColVals, FKVals)) = FKVals . 
	
endfm

view Row from TRIV to DATA is
	sort Elt to Data . 
endv

fmod DATABASE is
	pr DATA .
	pr SEQENCE{Row} .
	
	sort Database ErrDatabase .
	subsorts ErrDatabase < Database .

--- Database = < table*, row *>
--- possible implementations:	
--- 1. table has a list of rows
--- 2. there are only rows => table is a set of rows with the same structure => it is imposible to add structural information into database (simple CREATE table will not wokr, there has to be at least one row)
	op database : List{Table} List{Row} -> Database [ctor] .
	op errDatabase : String Database -> ErrDatabase [ctor] .
	
	var Tabs : List{Table} .
	var T : Table .
	var Rows : List{Row} .
	var D : Database .
	var N : Qid .
	var PK : PrimaryKey .
	var Cols : List{Column} .
	var FKs : List{ForeignKey} .
	var Fk : ForeignKey .

	op tables : Database -> List{Table} .
	eq tables(database(Tabs, Rows)) = Tabs .
	
	op data : Database -> List{Row} . 
	eq data(database(Tabs, Rows)) = Rows .

	op referencesExist : List{ForeignKey} List{Table} -> Bool .
	eq referencesExist([], Tabs) = true .
	eq referencesExist(FKs, []) = false .
	eq referencesExist(Fk, T) = reference(Fk) == name(T) .
	eq referencesExist(FKs, Tabs) = containsName(Tabs, reference(head(FKs))) or referencesExist(tail(FKs), Tabs) .
	
		
	op dataExist : Qid List{Row} -> Bool .
	eq dataExist(N, []) = false .
	eq dataExist(N, Rows) = (inTable(head(Rows)) == N) or dataExist(N, tail(Rows)) .
	
	op isReferenced : Qid List{Table} -> Bool .
	eq isReferenced(N, []) = false .
	eq isReferenced(N, Tabs) = references(N, foreignKeys(head(Tabs))) or isReferenced(N, tail(Tabs)) .

--- helpers

--- move to isReferenced ?
	op references : Qid List{ForeignKey} -> Bool .
	eq references(N, []) = false .
	eq references(N, FKs) = reference(head(FKs)) == N or references(N, tail(FKs)) . 
	
	
endfm

fmod DDL is
	pr DATABASE .
	
	var Tabs : List{Table} .
	var Rows : List{Row} .
	var D : Database .
	var N : Qid .
	var PK : PrimaryKey .
	var Cols : List{Column} .
	var FKs : List{ForeignKey} .
	
--- addTable -> SQL : CREATE TABLE
--- all referenced tables have to exist
	op addTable : Database Qid PrimaryKey List{Column} List{ForeignKey} -> Database .
	ceq addTable(D, N, PK, Cols, FKs) = errDatabase("Unable to add table - name exists", D) if containsName(tables(D), N) .
	ceq addTable(D, N, PK, Cols, FKs) = errDatabase("Unable to add table - reference(s) not exist(s)", D) if not referencesExist(FKs, tables(D)) .
	eq addTable(D, N, PK, Cols, FKs) = database(tables(D) table(N, PK, Cols, FKs), data(D)) [owise] .

--- removeTable -> SQL: DROP TABLE	
--- there is no data in table
--- the table is not referenced by a FK
	op removeTable : Database Qid -> Database .
	ceq removeTable(D, N) = errDatabase("Unable to remove table - table not exists", D)  if not containsName(tables(D), N) .
	ceq removeTable(D, N) = errDatabase("Unable to remove table - data exists", D)  if dataExist(N, data(D)) .
	ceq removeTable(D, N) = errDatabase("Unable to remove table - table is referenced by a FK", D)  if isReferenced(N, tables(D)) .
	eq removeTable(D, N) = database(removeByName(tables(D), N), data(D)) .

--- addColumn -> SQL : ALTER TABLE table_name ADD column_name datatype
	op addColumn : Database Qid Column -> Database .
--- removeColumn -> SQL : ALTER TABLE table_name DROP COLUMN column_name
endfm
